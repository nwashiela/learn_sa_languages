<form action="/lastpage" method="get">
    <div class="exercise">
        <h2>Start greeting. Have fun &#9996</h2>
    </div>

    {{!-- <button type="submit" class="button">my results &#128515</button> --}}
</form>


<div class="teachStyle">

    <div>
        <div class="userMessage"></div>
        <div class="success"></div>
        <div class="img"> </div>
    </div>

    <div class="languages">


        <input type="button" id="xhosa" onclick="greetIn('xhosa')" value="Isixhosa">
        <input type="button" id="zulu" onclick="greetIn('zulu')" value="isiZulu">
        <input type="button" id="venda" onclick="greetIn('venda')" value="tshiVenda">
        <input type="button" id="english" onclick="greetIn('english')" value="English">
        <input type="button" id="ndebele" onclick="greetIn('ndebele')" value="isindebele">

        {{!-- <ul>
            <li> this is a mini tutorial of how to pronounce the languages.</li>
            <li> Help your self and listen to each of them and get your a brief light. &#128521;</li>
        </ul> --}}

        <div class="mesage">
            Press The Start Button

        </div>

        
    </div>
    <button type="button" onclick="init()" class="button1">Start &#9193</button>

    <br>

    <div class="langDisplay"></div>


</div>



<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
<script
    src="https://cdn.jsdelivr.net/npm/@tensorflow-models/speech-commands@0.4.0/dist/speech-commands.min.js"></script>



<script src="../public/js/langsound.js"></script>

<script type="text/javascript">
    const userMessageElem = document.querySelector(".userMessage");

    const successElem = document.querySelector(".success")

    let currentLanguage = "";
    function greetIn(language) {
        currentLanguage = language;

    
        userMessageElem.innerHTML = "<h2>Please greet me in </h2>"+ `<span style="font-size: 40px">${currentLanguage}</span>`;
        let success = successElem.innerHTML = "";

        

        const modelTag = language;

        if(modelTag === success){
           jingglebell()
        }

        if (modelTag === "xhosa") {
            img.innerHTML = "<img src= '/traditional pictures/Xhosa.jpg' height=\'150px\'>"
        }

        else if (modelTag === "zulu") {
            img.innerHTML = "<img src= '/traditional pictures/zulu.jpg' height=\'150px\'>"

        }
        else if (modelTag === "ndebele") {
            img.innerHTML = "<img src= '/traditional pictures/ndebele.png' height=\'150px\'>"

        }
        else if (modelTag === "venda") {
            img.innerHTML = "<img src= '/traditional pictures/venda.jpeg' height=\'150px\'>"

        }
        else if (modelTag === "english") {
            img.innerHTML = "<img src= '/traditional pictures/CASPAR-LATHAM-047.jpg' height=\'150px\'>"

        } else if (modelTag === "background") {
            img.innerHTML = "<img src= '/traditional pictures/thebig5.jpg height=\'150px\'>"

        }

    }

    var img = document.querySelector('.img')
    // more documentation available at
    // https://github.com/tensorflow/tfjs-models/tree/master/speech-commands

    // the link to your model provided by Teachable Machine export panel
    const URL = "https://teachablemachine.withgoogle.com/models/b-_CxRbS6/";


    async function createModel() {
        const checkpointURL = URL + "model.json"; // model topology
        const metadataURL = URL + "metadata.json"; // model metadata

        const recognizer = speechCommands.create(
            "BROWSER_FFT", // fourier transform type, not useful to change
            undefined, // speech commands vocabulary feature, not useful for your models
            checkpointURL,
            metadataURL);

        // check that model and metadata are loaded via HTTPS req/*  */uests.
        await recognizer.ensureModelLoaded();

        return recognizer;
    }

    async function init() {
        const recognizer = await createModel();
        const classLabels = recognizer.wordLabels(); // get class labels
        
        //const labelContainer = document.getElementById("label-container");
        //for (let i = 0; i < classLabels.length; i++) {
        //    labelContainer.appendChild(document.createElement("div"));
        //}

        // listen() takes two arguments:
        // 1. A callback function that is invoked anytime a word is recognized.


        // 2. A configuration object with adjustable fields
        recognizer.listen(result => {
            const scores = result.scores; // probability of prediction for each class
            // render the probability scores per class
            // let nodeC;
            let highestClass = 0;
            let modelTag = "";

            for (let i = 0; i < classLabels.length; i++) {
                const classPrediction = classLabels[i]
                    + ": " + result.scores[i].toFixed(2);
                if (result.scores[i].toFixed(2) > highestClass) {
                    highestClass = result.scores[i].toFixed(2)
                    modelTag = classLabels[i]
                }
            }

            // labelContainer.innerHTML = modelTag;

            if (highestClass > 0.65) {
                if (currentLanguage === modelTag) {
                    userMessageElem.innerHTML = "";
                    successElem.innerHTML = "Well done! You greeted in " + currentLanguage
                    currentLanguage = "";
                }

            }





            //("/traditional pictures/sotho.jpg")
            //img.innerHTML = "Salzwa"
        }, {
            includeSpectrogram: true, // in case listen should return result.spectrogram
            probabilityThreshold: 0.75,
            invokeCallbackOnNoiseAndUnknown: true,
            overlapFactor: 0.50 // probably want between 0.5 and 0.75. More info in README
        });



        // Stop the recognition in 5 seconds.
        // setTimeout(() => recognizer.stopListening(), 5000);

        //lulama,azipheli,salizo

    }

</script>